<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="c:\temp\internal-nlog-AspNetCore.txt">

  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>

  <targets>

    <target name="database" xsi:type="Database">
      <connectionString>Data Source=MER-NB-00667;Initial Catalog=Nlog;Integrated Security=True;Persist Security Info=False;Pooling=False;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False
      </connectionString>
      <commandText>
        insert into dbo.Logs (
        MachineName, Logged, Level, Message,
        Logger, Callsite, Exception
        ) values (
        @MachineName, @Logged, @Level, @Message,
        @Logger, @Callsite, @Exception
        );
      </commandText>

      <parameter name="@MachineName" layout="${machinename}" />
      <parameter name="@Logged" layout="${date}" />
      <parameter name="@Level" layout="${level}" />
      <parameter name="@Message" layout="${message}" />
      <parameter name="@Logger" layout="${logger}" />
      <parameter name="@Callsite" layout="${callsite}" />
      <parameter name="@Exception" layout="${exception:tostring}" />
    </target>

    <!-- Varsayılan log mesajlarının kaydedileceği yeri belirleriz -->
    <target xsi:type="File" name="allfile" fileName="nlog-AspNetCore-all-${shortdate}.log"
            layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}" />

    <!-- Burası bizim yazdığımız loglar için kayıt yapılacak yeri belirleriz c:\temp\nlog yerine nlog.. yaptık ki projenin içerisine kaydetsin bin->Debug içerisinde nlog-AspNetCore-own adında-->
    <target xsi:type="File" name="ownFile-web" fileName="nlog-AspNetCore-own-${shortdate}.log"
            layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}| body: ${aspnet-request-posted-body}" />

   
    <!-- https://github.com/NLog/NLog/wiki/Database-target sitesinde veritabanı için adımlar var log tablosunun inserti de sitede mevcut-->
    
 

    <target xsi:type="Console" name="lifetimeConsole" layout="${level:truncate=4:tolower=true}\: ${logger}[0]${newline}      ${message}${exception:format=tostring}" />
  </targets>

  <rules>
    <!--Microsoftta olan tüm logları appsettings.js ile karşılaştırarak min level en yüksek hangisi ise ondan başlayarak tüm logları göster ve allfile dosyasına kaydet target da en başta görünüyor-->
    <logger name="*" minlevel="Trace" writeTo="allfile" />

    <!--Bunu Göstermeye gerek yok dosyamda -->
    <!--<logger name="Microsoft.Hosting.Lifetime" minlevel="Critical" writeTo="lifetimeConsole, ownFile-web" final="true" />-->


    <!--Info ve üstü olan tüm logları atla diyor belirtilen nameler için -->
    <logger name="Microsoft.*" maxlevel="Info" final="true" />
    <logger name="System.Net.Http.*" maxlevel="Info" final="true" />

    <!--Tüm Loglarını al ve ownFile-web dosyasına yaz. Yani bizim loglarımıza Kaydedeceği seviyeyi yine appsettings.json ile karşılaştırırı Traceden üstündse örn. Üstün olandan itibaren yazar-->
    <logger name="*" minlevel="Info" writeTo="ownFile-web" />

    <logger name="*" minlevel="Info" writeTo="database" />
    <!--Veritabanına kaydetmek için targetindeki name kullanılır writeTo="TargetName"-->

  </rules>
</nlog>